<?xml version="1.0"?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Workday and Salesforce Worker Aggregation</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
As a Salesforce admin I want to aggregate users from Workday and Salesforce and compare them to see which users can only be found in one of the two and which users are in both instances. 

For practical purposes this Template will generate the result in the format of a CSV Report sent by E-mail.

This Template should serve as a foundation for extracting data from two systems, aggregating data, comparing values of fields for the objects, and generating a report on the differences. 

As implemented, it gets workers from Workday and users from Salesforce, compares by the E-mail address of the workers and users, and generates a CSV file which shows workers in Workday, users in Salesforce. The report is then emailed to a configured group of E-mail addresses.
		</section>
		<section id="considerations">
<![CDATA[
To run this Anypoint Template, there are certain preconditions that must be considered. All of them deal with the preparations in both, that must be made in order for all to run smoothly. **Failling to do so could lead to unexpected behavior of the template.**
]]>
		</section>
		<section id="wday_src">
<![CDATA[
The Workday connector currently does not support autopaging functionality out of the box so number of processed objects are limited to the connector's single page size.
]]>
		</section>
		<section id="running_on_cloudhub">
<![CDATA[
Once your app is all set and started, supposing you choose as domain name `workdayworkersaggregation` to trigger the use case you just need to hit `http://workdayworkersaggregation.cloudhub.io/generatereport` and the report will be sent to the emails configured.

]]>
		</section>
		<section id="default_running_on_premise">
<![CDATA[
Complete all properties in one of the property files, for example in [mule.prod.properties] (../blob/master/src/main/resources/mule.prod.properties) and run your app with the corresponding environment variable to use it. To follow the example, this will be `mule.env=prod`.

After this, to trigger the use case you just need to hit the local http endpoint with the port you configured in your file. If this is, for instance, `9090` then you should hit: `http://localhost:9090/generatereport` and this will create a CSV report and send it to the mails set.
]]>
		</section>
		<section id="application_configuration">
		<![CDATA[
+ http.port `9090` 

#### Workday Connector configuration for company A
 + wdayf.user `wday_user`
 + wdayf.tenant `your_tenant_name`
 + wdayf.password `wday_password`
 + wdayf.hostname `your_impl-cc.workday.com`

#### SalesForce Connector configuration for company B
+ sfdc.username `joan.baez@orgb`
+ sfdc.password `JoanBaez456`
+ sfdc.securityToken `ces56arl7apQs56XTddf34X`
+ sfdc.url `https://login.salesforce.com/services/Soap/u/32.0`


#### SMTP Services configuration
+ smtp.host `smtp.gmail.com`
+ smtp.port `587`
+ smtp.user `exampleuser@gmail.com`
+ smtp.password `ExamplePassword456`

#### Mail details
+ mail.from `exampleuser@gmail.com`
+ mail.to `woody.guthrie@gmail.com`
+ mail.subject `SFDC Users Report`
+ mail.body `Users report comparing users from SFDC Accounts`
+ attachment.name `OrderedReport.csv`
]]>
		</section>
		<section id="api_calls">
		<![CDATA[
SalesForce imposes limits on the number of API Calls that can be made. In this template there is only one call made so this is not something to worry about.
]]>
		</section>
		<section id="default_endpoints_xml">
		<![CDATA[
This is the file where you will find the inbound and outbound sides of your integration app.
This Template has an [HTTP Listener Connector](http://www.mulesoft.org/documentation/display/current/HTTP+Connector) as the way to trigger the use case and an [SMTP Transport](http://www.mulesoft.org/documentation/display/current/SMTP+Transport+Reference) as the outbound way to send the report.

$H$H# Trigger Flow
**HTTP Listener Connector** - Start Report Generation
+ `${http.port}` is a property to be defined either in a property file or in CloudHub environment variables.
+ The path configured by default is `generatereport` and you are free to change for the one you prefer.
+ The host name for all endpoints in your CloudHub configuration should be defined as `localhost`. CloudHub will then route requests from your application domain URL to the endpoint.

$H$H# Outbound Flow
**SMTP Outbound Endpoint** - Send Mail
+ Both SMTP Server configuration and the actual E-mail to be sent are defined in this endpoint.
+ This flow is going to be invoked from the flow that does all the functional work: *mainFlow*, the same that is invoked from the Inbound Flow upon triggering the HTTP Listener Connector.
]]>
		</section>
		<section id="default_business_logic_xml">
		<![CDATA[
Functional aspect of the Template is implemented in this XML, directed by one flow responsible for aggregation of data, comparing records and finally formating the output, in this case being a report.
The *mainFlow* organizes the job in three different steps and finally invokes the *outboundFlow* that will deliver the report to the corresponding outbound endpoint.
This flow has Exception Strategy that basically consists on invoking the *defaultChoiseExceptionStrategy* defined in *errorHandling.xml* file.


$H$H# Gather Data Flow
Mainly consisting of two calls (Queries) to SalesForce and storing each response to the Invocation Variable named *workersFromWorkday* or *usersFromSalesforce* accordingly.

[Scatter Gather](http://www.mulesoft.org/documentation/display/current/Scatter-Gather) is responsible for aggregating the results from the Workday Workers and Salesforce Org Users.
Criteria and format applied:

+ Scatter Gather component implements an aggregation strategy that results in List of Maps with keys: **Name**, **Email**, **IDInWorkday**, **WorkerNameInWorkday**, **IDInSalesforce**, **UserNameInSalesforce**.

+ Workers and Users will be matched by E-mail, that is to say, a record in Workday and Salesforce organisations with the same E-mail is considered the same worker (user).

$H$H# Format Output Flow
+ [Java Transformer](http://www.mulesoft.org/documentation/display/current/Java+Transformer+Reference) responsible for sorting the list of records in the following order:

1. Workers only in Workday
2. Users only in Salesforce
3. Workers and Users in both Workday and Salesforce

All records ordered alphabetically by E-mail within each category.
If you want to change this order then the *compare* method should be modified.

+ CSV Report is generated by [Anypoint DataWeave transformer](https://developer.mulesoft.com/docs/display/current/DataWeave) transforming the List of Maps in CSV with headers **Name**, **Email**, **IDInWorkday**, **WorkerNameInWorkday**, **IDInSalesforce** and **UserNameInSalesforce**.
+ An [Object to String transformer](http://www.mulesoft.org/documentation/display/current/Transformers) is used to set the payload as an String. 
]]>
		</section>
	</sections>
</configuration>